% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Basis-Approach.R
\name{TSCI.basis}
\alias{TSCI.basis}
\title{TSCI with Basis Approach}
\usage{
TSCI.basis(
  Y,
  D,
  Z,
  X,
  vio.space = NULL,
  layer = TRUE,
  intercept = TRUE,
  str.thol = 20
)
}
\arguments{
\item{Y}{continuous, n by 1 outcome vector.}

\item{D}{continuous or binary, n by 1 treatment vector.}

\item{Z}{continuous or binary, n by 1 Instrumental Variable, only one instrument is implemented for violation space selection now.}

\item{X}{continuous or binary, n by p_x baseline covariates matrix.}

\item{vio.space}{n by Q-1 matrix, each column refers to a violation form of Z, default by NULL assumes linear and quadratic violation.}

\item{layer}{logic, do layer selection of violation space or not, default by TRUE.}

\item{intercept}{logic, whether to include intercept or not in the outcome model, default by TRUE.}

\item{str.thol}{minimal value of the threshold of IV strength test, default by 20.}
}
\value{
\item{\code{Coef.vec}}{a vector of length 2*Q, the point and bias corrected estimators with fixed violation spaces.}
    \item{\code{sd.vec}}{estimated standard deviation of Coef.vec.}
    \item{\code{Coef.robust}}{a vector of length 4, the point and bias corrected estimators in the violation space using comparison method and robust method.}
    \item{\code{sd.robust}}{estimated standard deviation of Coef.robust.}
    \item{\code{SigmaSqY}}{estimated noise level of outcome model.}
    \item{\code{SigmaSqD}}{estimated noise level of treatment model.}
    \item{\code{SigmaSqY.Qmax}}{noise level of outcome model in violation space Q.max.}
    \item{\code{iv.str}}{a vector of length Q, the IV strength.}
    \item{\code{iv.thol}}{a vector of length Q,, IV strength threshold.}
    \item{\code{Q.max}}{maximal violation space chosen by IV strength test.}
    \item{\code{q.comp}}{estimated violation space using comparison method.}
    \item{\code{q.robust}}{estimated violation space using robust method.}
    \item{\code{invalidity}}{invalidity of TSLS, TRUE means there is at least linear violation.}
    \item{\code{run.OLS}}{ogic, whether the IV is weak when assuming linearly invalid, IV strength test only passes with no violation.}
    \item{\code{weak.iv}}{ogic, whether the IV is weak when assuming no violation, IV strength test does not pass even with no violation We need to run OLS if TRUE since TSLS result is not reliable.}
}
\description{
Implement basis approach using data splitting and do inference with violation space selection
}
\examples{
\donttest{
# function to generate covariance matrix
A1gen<-function(rho,p){
  A1=matrix(0,p,p)
  for(i in 1:p){
    for(j in 1:p){
      A1[i,j]<-rho^(abs(i-j))
    }
  }
  A1
}


### dimension change the dimension 10,20
p = 10
### please change this n = 1000, 3000, 5000
n = 1000
### setting, change across 1(for previous 1 and 4), 2(for previous 3 and 6)
f.index = 2
### change the interaction 0, 0.5, 1, 1.5
inter.val = 0
### a denotes the IV strength, set as 1
a = 1
### violation index, set as 1 or 2
vio.index = 1
### tau denotes the violation strength
### set tau as 1
tau = 1


##############################
f_1 <- function(x){x+a*(x^2+0.5*x^4) -25/12}
# f_2 <- function(x){exp(2*a+x+0.5*x^3)+a*(x^2+0.5*x^4)}
f_2 <- function(x){a*(1*sin(2*pi*x) + 1.5*cos(2*pi*x))}
rho1=0.5
Cov<-(A1gen(rho1,p+1))
mu<-rep(0,p+1)
beta=1
alpha<-as.matrix(rep(-0.3,p))
gamma<-as.matrix(rep(0.2,p))
inter<-as.matrix(c(rep(inter.val,5),rep(0,p-5)))


#### generate the data
mu.error<-rep(0,2)
Cov.error<-matrix(c(1,0.5,0.5,1),2,2)
Error<-mvrnorm(n, mu.error, Cov.error)
W.original<-mvrnorm(n, mu, Cov)
W<-pnorm(W.original)
Z<-W[,1]
X<-W[,-1]
###### generate the data for the treatment variable D
if(f.index==1){
  D=f_1(Z)+X\%*\%alpha+Z*X\%*\%inter+Error[,1]
}
if(f.index==2){
  D=f_2(Z)+X\%*\%alpha+Z*X\%*\%inter+Error[,1]
}
####### generate the outcome variable
# if(vio.index==0){
#   Y=D*beta+ X\%*\% gamma+Error[,2]
# }
if(vio.index==1){
  Y=D*beta+ tau*Z+ X\%*\% gamma+Error[,2]
}
if(vio.index==2){
  Y=D*beta+ tau*(Z^2+Z-1)+ X\%*\% gamma+Error[,2] # difficult if no Z
}


### basis
output.basis <- TSCI.basis(Y,D,Z,X)
# point estimate
output.basis$Coef.robust["Basis-robust"]
# standard error
output.basis$sd.robust["Basis-robust"]
}


}
